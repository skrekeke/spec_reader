function  [y,g]  = Lorentz_n( x, p, n )
%LORENTZ_N Summary of this function goes here
%   n - number of Lorentzian peaks,
%   a - amplitude,
%   w - width,
%   x0 - mean location

switch n
    case 1
        a = p(1);
        w = p(2);
        x0 = p(3);
        y = a./(((x-x0)./w).^2 + 1);
%         if nargout > 1
%             g = [1./(((x-x0)./w).^2 + 1);
%                 2.*a.*(x-x0).^2./w.^3./(((x-x0)./w).^2 + 1).^2;
%                 2.*a.*(x0-x)./w.^2./(((x-x0)./w).^2 + 1).^2];
%         end
    case 2
        a = [p(1), p(2)];
        w = [p(3), p(4)];
        x0 = [p(5), p(6)];
        y = a(1)./(((x-x0(1))./w(1)).^2 + 1) + a(2)./(((x-x0(2))./w(2)).^2 + 1);
%         if nargout > 1
%             g = [2.*a(1).*(x-x0(1))./w(1).^2./(((x-x0(1))./w(1)).^2 + 1).^2 + ...
%                 2.*a(2).*(x-x0(2))./w(2).^2./(((x-x0(2))./w(2)).^2 + 1).^2;
%                 2.*a(1).*(1 - (4.*((x-x0(1))./w(1)).^2./(((x-x0(1))./w(1)).^2 + 1)))./w(1).^2./(((x-x0(1))./w(1)).^2 + 1).^2 + ...
%                 2.*a(2).*(1 - (4.*((x-x0(2))./w(2)).^2./(((x-x0(2))./w(2)).^2 + 1)))./w(2).^2./(((x-x0(2))./w(2)).^2 + 1).^2];
%         end
    case 3
        a = [p(1), p(2), p(3)];
        w = [p(4), p(5), p(6)];
        x0 = [p(7), p(8), p(9)];
        y = a(1)./(((x-x0(1))./w(1)).^2 + 1) + a(2)./(((x-x0(2))./w(2)).^2 + 1) + a(3)./(((x-x0(3))./w(3)).^2 + 1);
%         if nargout > 1
%             g = [2.*a(1).*(x-x0(1))./w(1).^2./(((x-x0(1))./w(1)).^2 + 1).^2 + ...
%                  2.*a(2).*(x-x0(2))./w(2).^2./(((x-x0(2))./w(2)).^2 + 1).^2 + ...
%                  2.*a(3).*(x-x0(3))./w(3).^2./(((x-x0(3))./w(3)).^2 + 1).^2;
%                  2.*a(1).*(1 - (4.*((x-x0(1))./w(1)).^2./(((x-x0(1))./w(1)).^2 + 1)))./w(1).^2./(((x-x0(1))./w(1)).^2 + 1).^2 + ...
%                  2.*a(2).*(1 - (4.*((x-x0(2))./w(2)).^2./(((x-x0(2))./w(2)).^2 + 1)))./w(2).^2./(((x-x0(2))./w(2)).^2 + 1).^2 + ...
%                  2.*a(3).*(1 - (4.*((x-x0(3))./w(3)).^2./(((x-x0(3))./w(3)).^2 + 1)))./w(3).^2./(((x-x0(3))./w(3)).^2 + 1).^2];
%         end
    otherwise
        display('number of peaks exceeds 3.')
        y = NaN;
end  
end

